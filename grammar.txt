program -> declaration* EOF

declaration → classDecl
            | funDecl
            | varDecl
            | statement

classDecl → "class" IDENTIFIER "{" function* "}"

funDecl  → "fun" function
function → IDENTIFIER "(" parameters? ")" block

parameters → IDENTIFIER ( "," IDENTIFIER )*

statement → exprStmt
          | forStmt
          | ifStmt
          | printStmt
          | returnStmt
          | whileStmt
          | block

returnStmt → "return" expression? ";"

forStmt   → "for" "(" ( varDecl | exprStmt | ";" )
                      expression? ";"
                      expression? ")" statement

whileStmt → "while" "(" expression ")" statement

ifStmt → "if" "(" expression ")" statement ( "else" statement )?

block → "{" declaration* "}"

expression → assignment

assignment → ( call "." )? IDENTIFIER "=" assignment
           | logic_or

logic_or → logic_and ( "or" logic_and )*
logic_and → equality ( "and" equality )*

varDecl → "var" IDENTIFIER ( "=" expression )? ";"

primary → "true" | "false" | "nil" | "this"
        | NUMBER | STRING
        | "(" expression ")"
        | IDENTIFIER


unary → ( "!" | "-" ) unary | call
call → primary ( "(" arguments? ")" | "." IDENTIFIER )*
arguments → expression ( "," expression )*

